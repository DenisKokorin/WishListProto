// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: wishlist.proto

package wl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WishlistService_CreateWishlist_FullMethodName = "/wishlist.WishlistService/CreateWishlist"
	WishlistService_GetAllLists_FullMethodName    = "/wishlist.WishlistService/GetAllLists"
	WishlistService_GetWishList_FullMethodName    = "/wishlist.WishlistService/GetWishList"
	WishlistService_UpdateWishList_FullMethodName = "/wishlist.WishlistService/UpdateWishList"
	WishlistService_DeleteWishList_FullMethodName = "/wishlist.WishlistService/DeleteWishList"
	WishlistService_AddItem_FullMethodName        = "/wishlist.WishlistService/AddItem"
	WishlistService_UpdateItem_FullMethodName     = "/wishlist.WishlistService/UpdateItem"
	WishlistService_DeleteItem_FullMethodName     = "/wishlist.WishlistService/DeleteItem"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*WishListResponse, error)
	GetAllLists(ctx context.Context, in *GetAllListsRequest, opts ...grpc.CallOption) (*AllLists, error)
	GetWishList(ctx context.Context, in *GetWishListRequest, opts ...grpc.CallOption) (*WishListResponse, error)
	UpdateWishList(ctx context.Context, in *UpdateWishListRequest, opts ...grpc.CallOption) (*WishListResponse, error)
	DeleteWishList(ctx context.Context, in *DeleteWishListRequest, opts ...grpc.CallOption) (*DeleteWishListResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*WishListResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*WishListResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*WishListResponse, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_CreateWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetAllLists(ctx context.Context, in *GetAllListsRequest, opts ...grpc.CallOption) (*AllLists, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllLists)
	err := c.cc.Invoke(ctx, WishlistService_GetAllLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishList(ctx context.Context, in *GetWishListRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_GetWishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) UpdateWishList(ctx context.Context, in *UpdateWishListRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_UpdateWishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishList(ctx context.Context, in *DeleteWishListRequest, opts ...grpc.CallOption) (*DeleteWishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_DeleteWishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*WishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, WishlistService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility.
type WishlistServiceServer interface {
	CreateWishlist(context.Context, *CreateWishlistRequest) (*WishListResponse, error)
	GetAllLists(context.Context, *GetAllListsRequest) (*AllLists, error)
	GetWishList(context.Context, *GetWishListRequest) (*WishListResponse, error)
	UpdateWishList(context.Context, *UpdateWishListRequest) (*WishListResponse, error)
	DeleteWishList(context.Context, *DeleteWishListRequest) (*DeleteWishListResponse, error)
	AddItem(context.Context, *AddItemRequest) (*WishListResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*WishListResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*WishListResponse, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWishlistServiceServer struct{}

func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *CreateWishlistRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) GetAllLists(context.Context, *GetAllListsRequest) (*AllLists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLists not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishList(context.Context, *GetWishListRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishList not implemented")
}
func (UnimplementedWishlistServiceServer) UpdateWishList(context.Context, *UpdateWishListRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishList not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishList(context.Context, *DeleteWishListRequest) (*DeleteWishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishList not implemented")
}
func (UnimplementedWishlistServiceServer) AddItem(context.Context, *AddItemRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedWishlistServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}
func (UnimplementedWishlistServiceServer) testEmbeddedByValue()                         {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWishlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_CreateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*CreateWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetAllLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetAllLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetAllLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetAllLists(ctx, req.(*GetAllListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetWishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishList(ctx, req.(*GetWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_UpdateWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).UpdateWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_UpdateWishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).UpdateWishList(ctx, req.(*UpdateWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteWishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishList(ctx, req.(*DeleteWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "GetAllLists",
			Handler:    _WishlistService_GetAllLists_Handler,
		},
		{
			MethodName: "GetWishList",
			Handler:    _WishlistService_GetWishList_Handler,
		},
		{
			MethodName: "UpdateWishList",
			Handler:    _WishlistService_UpdateWishList_Handler,
		},
		{
			MethodName: "DeleteWishList",
			Handler:    _WishlistService_DeleteWishList_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _WishlistService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _WishlistService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _WishlistService_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wishlist.proto",
}
